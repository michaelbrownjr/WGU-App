# Reflection Task

**name**: _Michael Brown_
**id**: #000861887
**class**: Mobile Application Development â€“ C196
**project**: Scheduling App

[toc]

## Mobile Application Development - C196

```
Operating System:Windows 11 
minSdkVersion 21
targetSdkVersion 32 
```
_How my application would be different if it were developed for a tablet rather than a phone_
Larger screens such as tablets expand the user experience. For my app to function properly for tablets, I would need to use Fragments to introduce modularity into my app so when a tablet quickly changes orientation, the UI can be split utilizing the larger screen. A good example of this would be if I had navigation buttons on the bottom of the app. By using Fragments, I would be able to modularize the navigation UI and the Fragment UI moving the navigation UI in a more tablet friendly user experience. I would need to add my fragment to the page's activity layout file. 

## Challenges
One of the challenges I came across was trying to figure out where to design first. Should I start from the bottom, with the database design or design the UI first and work my way down? I researched areas where working with the database design first, would allow better testing and structuring of the models of data. Another
Another challenge I faces was the confusion connecting data and UI changes between an Activity and ActivityList, specifically CourseActivity, AssessmentActivity, CourseListActivity, and CourseAssessmentListActivity. 

## Hoe I overcoming each challenge
Developing bottom up, by identifying the database design and implementing the required methods I would need was much easier to develop for. By using `LiveData`, I addressed problems such as the life-cycle of data on a GUI screen by always using the database for data. Information left on screen could be tossed out without loss and did not require additional complexity to maintain the state of the activity.
GUI was developed to meet the needs of the database, which meant that insufficient layouts could be tossed out rather then making critical database design changes. One database change that had to occur however was for radio buttons, which was changed to an int and provided with getting and setting methods to identify what a status integer related to, `0 == Dropped` for example.
I was unable to overcome the challenge of asynchronous data and checking its size, and resorted to implementing an entirely different call to the database to return synced data, allowing the app to identify the size of it and determine if a term has courses associated with it.

On the challenge of confusion connecting data and UI changes between activities, I referred back to my Storyboard and wrote down notes of all of the attributes that are connected within them, what methods are changing the attributes while traversing the life cycle. By doing this, I was able to create a fluent and consistent app life cycle without confusion. 

## A Different Approach
My different approach would include creating the storyboard from the beginning as this would decrease wasted time from creating GUI layouts that ended up being unused. A bottom-up approach and setting the foundation for the GUI would speed up development.
Given a firmer understanding of asynchronous operations and its limitations, I would have attempted to predict any requirements that might need to be solved by using synchronous calls.
For example, in the school scheduler project, the current approach assumed that no calls to the database required a synchronous call and only needed data as requested. I would restructure the database to allow calls to be synchronous or asynchronous.

```mermaid
classDiagram
	class Course
	Course : +LiveData getTermCoursesAsync(int termID)
	Course : +List getTermCourses(int termID)
	class Notes
	Notes : +LiveData getCourseNotesAsync(int termID)
	Notes : +List getCourseNotes(int termID)
```

Displaying live data is the most common usage, and most of the project would continue to utilize live data.
However, validation checks (such as ensuring courses cannot be deleted with notes attached, or courses associated with a term) would utilize this.
Calling the data this way, makes numerous changes up the abstraction layers.

```mermaid
graph LR
A[Dao] --> B[Repository] --> C{Data Type}
C --> |LiveData| D[Adapter]
C --> |List| E[Validation]
```
By doing this, validation checks on the data would be easier to handle, remove complexity of trying to *force* `LiveData` to act as `Lists` and improve optimization, as synchronous called would only be completed when needed.

## Emulator Usage
Emulators are a tool to rapidly develop programs by allowing the developer to load in a apk into many simulated environments, such as tablets, phones or even wearable devices such as watches.
The pro behind this is easy to see; a developer is not required to purchase a large variety of devices to test their software and see how it would function under normal usage. Additional features, such as root access or easily attaching debuggers allow examining databases or specific calls without requiring much setup. The risk of failure, possibly corrupting or damaging the phone is minimized as well.
On the other hand, while emulators simulate many characteristic of physical devices, they do not simulate everything. Desktop computers generally have stable, unlimited usage and high speed Internet connections. Phones however, are often metered, lose connection frequently and have slow connection speeds.
Physical devices may demonstrate unexpected quirks, such as unreliable blue-tooth connections, or unexpected battery usage that would not be identified in a emulator and as such, not addressed.
